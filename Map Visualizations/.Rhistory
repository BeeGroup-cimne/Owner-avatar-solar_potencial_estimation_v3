constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
for (construction in constructions){
clusters <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/"), recursive = FALSE, full.names = FALSE)
for (cluster in clusters){
df <- read.csv(paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/", cluster),
header = FALSE)
colnames(df) <- c("x", "y", "z")
df <- df %>% mutate(construction = construction)
df <- df %>% mutate(cluster = cluster)
pointsDF_list <- append(pointsDF_list, df)
}
}
}
}
View(pointsDF_list)
merged_df <- do.call(rbind, pointsDF_list)
View(merged_df)
View(df)
# Create the second map
pointsDF_list <- data.frame()
# Create the second map
pointsDF_list <- data.frame()
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
for (construction in constructions){
clusters <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/"), recursive = FALSE, full.names = FALSE)
for (cluster in clusters){
df <- read.csv(paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/", cluster),
header = FALSE)
colnames(df) <- c("x", "y", "z")
df <- df %>% mutate(construction = construction)
df <- df %>% mutate(cluster = cluster)
pointsDF_list <- rbind(pointsDF_list, df)
}
}
}
}
head(pointsDF_list)
pointsDF_list
library(RColorBrewer)
unique_clusters <- unique(data$cluster)
unique_clusters <- unique(pointsDF_list$cluster)
palette <- colorFactor(palette = "Set1", domain = unique_clusters)
map2 <-leaflet(pointsDF_list, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(
~x, ~y,        # Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
map2
data_sf <- st_as_sf(pointsDF_list, coords = c("x", "y"), crs = 25831)
library(sf)
data_sf <- st_as_sf(pointsDF_list, coords = c("x", "y"), crs = 25831)
data_sf
data_sf <- st_transform(data_sf, crs = 4326)
unique_clusters <- unique(data_sf$cluster)
palette <- colorFactor(palette = "Set1", domain = unique_clusters)
map2 <-leaflet(data_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(
~x, ~y,        # Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
map2 <-leaflet(data_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(
~st_coordinates(.)[,1], ~st_coordinates(.)[,2],        # Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
data_sf
data_sf$geometry
data_sf$geometry(1)
data_sf$geometry[1]
data_sf$geometry[1][1]
map2 <-leaflet(data_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(
~geometry,        # Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
map2 <-leaflet(data_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(# Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
map2
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", constructions, "/Map files/", constructions, ".gpkg")
partial_re_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
re_sf_list <- c(re_sf_list, partial_re_sf_list)
}
}
re_sf_list <- list()
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", constructions, "/Map files/", constructions, ".gpkg")
partial_re_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
re_sf_list <- c(re_sf_list, partial_re_sf_list)
}
}
merged_sf <- do.call(rbind, re_sf_list)
map1 <-leaflet(merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$Esri.WorldImagery, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addProviderTiles(providers$CartoDB.VoyagerOnlyLabels) %>%
addPolygons(weight = 4,
color =  "blue",
fillColor = "blue",
fillOpacity = 0.25,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". "))%>%
addScaleBar()
# Use leafsync to link the maps side-by-side with synchronized movement
# Synchronize the maps
sync_map <- browsable(tagList(
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
")),
sync(map1, map2)
))
# Save the synchronized map as an HTML file
htmltools::save_html(sync_map, "Cluster_map.html")
library(leaflet)
library(leaflet.extras)
install.packages("leaflet.extras")
library(leaflet.extras)
library(dplyr)
data <- data.frame(
lat = c(37.7749, 37.7849, 37.7949),  # Sample latitudes
lon = c(-122.4194, -122.4294, -122.4394),  # Sample longitudes
value = c(50, 70, 100)  # Sample values (could be anything like temperature, pollution level, etc.)
)
# Create the leaflet map
leaflet(data) %>%
addTiles() %>%  # Default OpenStreetMap tiles
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 20,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addTiles() %>%  # Default OpenStreetMap tiles
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 20,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 20,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
data <- data.frame(
lat = c(37.7749, 37.7849, 37.7949),  # Sample latitudes
lon = c(-122.4194, -122.4494, -122.4394),  # Sample longitudes
value = c(50, 70, 100)  # Sample values (could be anything like temperature, pollution level, etc.)
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
data <- data.frame(
lat = c(37.7749, 37.7849, 37.7949),  # Sample latitudes
lon = c(-122.4194, -122.4294, -122.4394),  # Sample longitudes
value = c(50, 70, 100)  # Sample values (could be anything like temperature, pollution level, etc.)
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
data <- data.frame(
lat = c(37.7749, 37.7849, 37.7949),  # Sample latitudes
lon = c(-122.4194, -122.4494, -122.4394),  # Sample longitudes
value = c(50, 70, 100)  # Sample values (could be anything like temperature, pollution level, etc.)
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 5  # Controls the radius of each point on the heatmap
)
15
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 15  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 100  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addTiles()
# Create the leaflet map
leaflet(data) %>%
addTiles()  %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 100  # Controls the radius of each point on the heatmap
)
# Create the leaflet map
leaflet(data) %>%
addTiles()  %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 100,  # Controls the radius of each point on the heatmap
opacity = 1
)
# Create the leaflet map
leaflet(data) %>%
addTiles()  %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 100,  # Controls the radius of each point on the heatmap
opacity = 1
)
# Create the leaflet map
leaflet(data) %>%
addTiles()  %>%
addHeatmap(
lng = ~lon,  # Longitude
lat = ~lat,  # Latitude
intensity = ~value,  # Values to determine the intensity
blur = 0,  # Controls the smoothing of the heatmap
max = 100,  # Maximum intensity value
radius = 100,  # Controls the radius of each point on the heatmap
opacity = 0.5
)
install.packages("deldir")
set.seed(42)
# Generate random points (x, y) in a given range
n <- 20  # Number of points
points <- data.frame(
x = runif(n, 0, 100),  # x-coordinates
y = runif(n, 0, 100)   # y-coordinates
)
# Calculate the Voronoi diagram using deldir
voronoi <- deldir(points$x, points$y)
# Load the packages
library(deldir)
library(ggplot2)
set.seed(42)
# Generate random points (x, y) in a given range
n <- 20  # Number of points
points <- data.frame(
x = runif(n, 0, 100),  # x-coordinates
y = runif(n, 0, 100)   # y-coordinates
)
# Calculate the Voronoi diagram using deldir
voronoi <- deldir(points$x, points$y)
ggplot() +
# Plot the Voronoi cells as polygons
geom_tile(data = voronoi$tile, aes(x = x, y = y, fill = factor(region)), color = "white") +
# Plot the random points as dots
geom_point(data = points, aes(x = x, y = y), color = "red", size = 3) +
# Customize the plot
theme_minimal() +
ggtitle("Voronoi Diagram") +
theme(legend.position = "none")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("tidyverse")
# install.packages("deldir")
library(deldir)
# Data
set.seed(1)
x <- runif(50)
y <- runif(50)
# Calculate Voronoi Tesselation and tiles
tesselation <- deldir(x, y)
tiles <- tile.list(tesselation)
# Circle
s <- seq(0, 2 * pi, length.out = 3000)
circle <- list(x = 0.5 * (1 + cos(s)),
y = 0.5 * (1 + sin(s)))
plot(tiles, pch = 19,
col.pts = "white",
border = "white",
fillcol = hcl.colors(50, "viridis"),
clipp = circle)
# install.packages("deldir")
library(deldir)
# Data
set.seed(1)
x <- runif(50)
y <- runif(50)
# Calculate Voronoi Tesselation and tiles
tesselation <- deldir(x, y)
tiles <- tile.list(tesselation)
# Circle
s <- seq(0, 2 * pi, length.out = 3000)
circle <- list(x = 0.5 * (1 + cos(s)),
y = 0.5 * (1 + sin(s)))
plot(tiles, pch = 19,
col.pts = "white",
border = "white",
fillcol = hcl.colors(50, "viridis"),
clipp = circle)
install.packages("polyclip")
plot(tiles, pch = 19,
col.pts = "white",
border = "white",
fillcol = hcl.colors(50, "viridis"),
clipp = circle)
deldir(x, y)
plot(tiles, pch = 19,
col.pts = "white",
fillcol = hcl.colors(50, "viridis"),
clipp = circle)
plot(tiles, pch = 19,
col.pts = s,
border = "white",
fillcol = hcl.colors(50, "viridis"),
clipp = circle)
s
plot(tiles, pch = 19,
col.pts = s+0.1,
border = "white",
fillcol = hcl.colors(50, "viridis"),
clipp = circle)
plot(tiles, pch = 19,
col.pts = "white",
border = "white",
fillcol = hcl.colors(50, "viridis"),
clipp = circle)
tiles
View(tiles)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(viridis)  # For viridis colormap
source("~/.active-rstudio-document", echo=TRUE)
install.packages("viridis")
library(viridis)  # For viridis colormap
library(sp)  # For spatial operations
source("~/.active-rstudio-document", echo=TRUE)
# Create the circular boundary (SpatialPoints and SpatialPolygons)
circle <- SpatialPoints(cbind(circle_center$lng, circle_center$lat))
circle_buffer <- gBuffer(circle, width = circle_radius, byid = TRUE)  # Buffer creates the circle
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document")
viridis(100)[1]
viridis(100)[100]
tile$pt.region
tiles
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/VoronoiTest.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/VoronoiTest.R", echo=TRUE)
# Define the circle (center: around NYC, radius: 0.05 degrees)
circle_center <- c(lng = -74, lat = 40.7)  # Approximate center of NYC
circle_radius <- 0.05  # Radius in degrees (about 5km)
# Create a SpatialPoints object from the center of the circle
circle <- SpatialPoints(cbind(circle_center["lng"], circle_center["lat"]))
# Now create the circle (buffer around the center)
circle_buffer <- gBuffer(circle, width = circle_radius, byid = TRUE)
circle
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
gIntersection
install.packages("geos")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/VoronoiTest.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("rmapshaper")
source("~/.active-rstudio-document", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/VoronoiTest.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
