yref = "paper", xref = "paper", xanchor = "middle", yanchor = "top",
showarrow = FALSE, fontSize=15, align = "center")
if(length(discontinuities_df$timestamp) < 1){
return(p)
}
timestamps <- discontinuities_df$timestamp[[1]]
timestamps <- as.POSIXct(timestamps, format="%Y-%m-%d %H:%M:%S", tz="Europe/London")
lengths <- discontinuities_df$length[[1]]
shapes <- list()
for (i in 1:length(timestamps)) {
start_time <- timestamps[i]
end_time <- start_time + as.difftime(lengths[i], units = "hours")
rectangle <- list(
type = "rect",
x0 = start_time,
x1 = end_time,
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
# if(lengths[i] >= 24){
#   p <- p %>% add_text(showlegend = FALSE, x = end_time+ as.difftime(6, units = "hours"), y = max(df$v)*0.9,
#        text = lengths[i])
# }
}
rectangle <- list(
type = "rect",
x0 = df$ts[length(df$ts)],
x1 = x_range[length(x_range)],
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
p <- p %>% layout(shapes = shapes)
return(p)
}
makePlot("Campus Sant Cugat")
basePath <- (dirname(rstudioapi::getActiveDocumentContext()$path))
basedir <- paste(basePath, "/Readings/EACTIVE_1h/", sep="")
currentCampus <- "Campus Sant Cugat"
plot_dataframe <- function(df, x_range, title="", height = 100, discontinuities_df) {
p <- plot_ly(df, x = ~ts, y = ~v, type = 'scatter',
mode = 'lines', line = list(color = 'blue'),
width = 1750, height = height) %>%
layout(title = NULL,
xaxis = list(title = ' ', range = x_range),
yaxis = list(title = 'kWh'),
showlegend = FALSE) %>%
add_annotations(text = title, x=0.5, y = 1.05,
yref = "paper", xref = "paper", xanchor = "middle", yanchor = "top",
showarrow = FALSE, fontSize=15, align = "center")
if(length(discontinuities_df$timestamp) < 1){
return(p)
}
timestamps <- discontinuities_df$timestamp[[1]]
timestamps <- as.POSIXct(timestamps, format="%Y-%m-%d %H:%M:%S", tz="Europe/London")
lengths <- discontinuities_df$length[[1]]
shapes <- list()
for (i in 1:length(timestamps)) {
start_time <- timestamps[i]
end_time <- start_time + as.difftime(lengths[i], units = "hours")
rectangle <- list(
type = "rect",
x0 = start_time,
x1 = end_time,
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
# if(lengths[i] >= 24){
#   p <- p %>% add_text(showlegend = FALSE, x = end_time+ as.difftime(6, units = "hours"), y = max(df$v)*0.9,
#        text = lengths[i])
# }
}
rectangle <- list(
type = "rect",
x0 = df$ts[length(df$ts)],
x1 = x_range[length(x_range)],
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
p <- p %>% layout(shapes = shapes)
return(p)
}
makePlot <- function(currentCampus){
currentCampusDevices_df <- subset(allDevices_df, campus == currentCampus)
measurements <- list()
discontinuities <- list()
for(i in 1:nrow(currentCampusDevices_df)) {
currentDevice <- currentCampusDevices_df$device_id[i]
file2023 <- paste(basedir,currentDevice, "_2023.csv",sep="")
file2024 <- paste(basedir,currentDevice, "_2024.csv",sep="")
currentReading2023 <- data.frame()
currentReading2024 <- data.frame()
if(file.exists(file2023)){
currentReading2023 <- data.frame(read.csv(file2023))
}
if(file.exists(file2024)){
currentReading2024 <- data.frame(read.csv(file2024))
}
currentReading <- rbind(currentReading2023, currentReading2024)
if(nrow(currentReading) > 0){
currentReading <- currentReading[ , c("ts", "v")]
} else {
currentReading <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(currentReading) <- c("ts", "v")
}
currentReading$ts <- as.POSIXct(currentReading$ts, format="%Y-%m-%dT%H:%M:%S", tz="Europe/London")
measurements[[i]] <- currentReading
discontinuities[[i]] <- info_json[info_json$device_id == currentDevice, ]$discontinuities
}
all_times <- do.call(c, lapply(measurements, function(df) df$ts))
common_time_range <- range(all_times)
nrows <- length(measurements) %/% 3 + (length(measurements) %% 3 > 0)
plots <- mapply(function(df, title, discontinuities_df) plot_dataframe(df, common_time_range, title, 200*nrows, discontinuities_df), measurements, currentCampusDevices_df$device_name, discontinuities, SIMPLIFY=FALSE)
# return(plots)
combined_plot <- subplot(plots, nrows = nrows,
titleX = TRUE, titleY = TRUE,
shareX = FALSE, shareY = FALSE)  %>%
layout(title = currentCampus)
return(combined_plot)
}
makePlot("Campus Sant Cugat")
library(RODBC)
install.packages("RODBC")
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=10.7.30.10;database=datadis_upc_v2)
''
''
dbhandle <- odbcDriverConnect('driver={SQL Server};server=10.7.30.10;database=datadis_upc_v2')
res <- sqlQuery(dbhandle, 'select * from supplies')
dbhandle <- odbcDriverConnect('Driver=SQL Server;server=10.7.30.10;database=datadis_upc_v2')
dbhandle <- odbcDriverConnect('Driver=SQL Server;Server=10.7.30.10;Database=datadis_upc_v2;UID=UPC; PWD=SEERREES')
res <- sqlQuery(dbhandle, 'select * from supplies')
dbhandle <- odbcDriverConnect('Driver=SQL Server;Server=10.7.30.10;Database=datadis_upc_v2;UID=UPC; PWD=SEERREES')
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowIdentifiedPlanes.R", echo=TRUE)
palette <- colorFactor(palette = "Set3", domain = unique(planes_merged_sf$plane[!grepl("Intersection", planes_merged_sf$plane)]))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ ifelse(grepl("Intersection", plane), "white", palette(plane)),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 2,
color =  "black",
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowIdentifiedPlanes.R", echo=TRUE)
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ ifelse(grepl("Intersection", plane), "white", palette(plane)),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 2,
color =  "black",
fillColor = "white"
opacity = 1,
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ ifelse(grepl("Intersection", plane), "white", palette(plane)),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 2,
color =  "black",
fillColor = "white",
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ ifelse(grepl("Intersection", plane), "white", palette(plane)),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 2,
color =  "black",
fillColor = "white",
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ ifelse(grepl("Intersection", plane), "white", palette(plane)),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 2,
color =  "black",
fillColor = "white",
fillOpacity = 0
opacity = 1,
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ ifelse(grepl("Intersection", plane), "white", palette(plane)),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 2,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ ifelse(grepl("Intersection", plane), "white", palette(plane)),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 4,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowIdentifiedPlanes.R", echo=TRUE)
palette <- colorFactor(palette = "Set3", domain = unique(planes_merged_sf$plane))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(plane),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 4,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
#addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(plane),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 4,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowIdentifiedPlanes.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowIdentifiedPlanes.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowIdentifiedPlanes.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowIdentifiedPlanes.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowIdentifiedPlanes.R", echo=TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(leaflet)
library(leafsync)
library(htmltools)
base_folder <- "/home/jaumeasensio/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Results/"
neighborhoods <- c("70_el Besòs i el Maresme")
re_sf_list <- list()
###########################################################
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", constructions, "/Map files/", constructions, ".gpkg")
partial_re_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
re_sf_list <- c(re_sf_list, partial_re_sf_list)
}
}
merged_sf <- do.call(rbind, re_sf_list)
map1 <-leaflet(merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$Esri.WorldImagery, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addProviderTiles(providers$CartoDB.VoyagerOnlyLabels) %>%
addPolygons(weight = 4,
color =  "black",
fillColor = "blue",
fillOpacity = 0,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". "))%>%
addScaleBar()
###########################################################################
# Create the second map
cadaster_sf_list <- list()
planes_sf_list <- list()
searchPath <- "/Plane Processing/No Overlaps/Geopackages/"
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- c("4058610DF3845G", "4554301DF3845D", "4251517DF3845A")
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
# gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", constructions, "/Map files/", constructions, ".gpkg")
#
# partial_cadaster_sf_list <- lapply(gpkg_files, function(file) {
#   re_sf <- read_sf(file)
#   re_sf <- st_zm(re_sf)
#   re_sf <- st_transform(re_sf, 4326)
#   re_sf$parcel <- parcel
#   re_sf$construction <- gsub(".gpkg", "", basename(file))
#   return(re_sf)
# })
# cadaster_sf_list <- c(cadaster_sf_list, partial_cadaster_sf_list)
for (construction in constructions){
planes <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath), recursive = FALSE, full.names = FALSE)
if(length(planes) > 0){
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath, planes)
partial_planes_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- construction
re_sf$plane  <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
planes_sf_list <- c(planes_sf_list, partial_planes_sf_list)
}
}
}
}
# cadaster_merged_sf <- do.call(rbind, cadaster_sf_list)
planes_merged_sf <- do.call(rbind, planes_sf_list)
palette <- colorFactor(palette = "Set3", domain = unique(planes_merged_sf$plane))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 25)) %>%
#addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(plane),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
# Use leafsync to link the maps side-by-side with synchronized movement
# Synchronize the maps
sync_map <- browsable(tagList(
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
")),
sync(map1, map2)
))
# Save the synchronized map as an HTML file
htmltools::save_html(sync_map, "synchronized_map.html")
cadaster_sf_list <- list()
planes_sf_list <- list()
searchPath <- "/Plane Processing/No Overlaps/Geopackages/"
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
# parcels <- c("4058610DF3845G", "4554301DF3845D", "4251517DF3845A")
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
# gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", constructions, "/Map files/", constructions, ".gpkg")
#
# partial_cadaster_sf_list <- lapply(gpkg_files, function(file) {
#   re_sf <- read_sf(file)
#   re_sf <- st_zm(re_sf)
#   re_sf <- st_transform(re_sf, 4326)
#   re_sf$parcel <- parcel
#   re_sf$construction <- gsub(".gpkg", "", basename(file))
#   return(re_sf)
# })
# cadaster_sf_list <- c(cadaster_sf_list, partial_cadaster_sf_list)
for (construction in constructions){
planes <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath), recursive = FALSE, full.names = FALSE)
if(length(planes) > 0){
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath, planes)
partial_planes_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- construction
re_sf$plane  <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
planes_sf_list <- c(planes_sf_list, partial_planes_sf_list)
}
}
}
}
# cadaster_merged_sf <- do.call(rbind, cadaster_sf_list)
planes_merged_sf <- do.call(rbind, planes_sf_list)
palette <- colorFactor(palette = "Set3", domain = unique(planes_merged_sf$plane))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(plane),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
###############################################################################################
# Use leafsync to link the maps side-by-side with synchronized movement
# Synchronize the maps
sync_map <- browsable(tagList(
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
")),
sync(map1, map2)
))
# Save the synchronized map as an HTML file
htmltools::save_html(sync_map, "synchronized_map.html")
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/TestSyncMaps.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters_Only.R", echo=TRUE)
