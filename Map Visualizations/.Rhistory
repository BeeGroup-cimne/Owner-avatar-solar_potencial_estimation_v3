re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- construction
re_sf$plane  <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
planes_sf_list <- c(planes_sf_list, partial_planes_sf_list)
}
}
}
}
# cadaster_merged_sf <- do.call(rbind, cadaster_sf_list)
planes_merged_sf <- do.call(rbind, planes_sf_list)
palette <- colorFactor(palette = "Set3", domain = unique(planes_merged_sf$plane))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(plane),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
masp2
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(plane),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 4,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
# Use leafsync to link the maps side-by-side with synchronized movement
# Synchronize the maps
sync_map <- browsable(tagList(
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
")),
sync(map1, map2)
))
saveWidget(sync_map, "synchronized_map.html")
htmlwidgets:saveWidget(sync_map, "synchronized_map.html")
htmlwidgets::saveWidget(sync_map, "synchronized_map.html")
library(htmlwidgets)
saveWidget(sync_map, "synchronized_map.html")
# Use leafsync to link the maps side-by-side with synchronized movement
# Synchronize the maps
sync_map <- browsable(tagList(
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
")),
sync(map1, map2)
))
sync_map
library(htmlwidgets)
saveWidget(sync_map, "synchronized_map.html")
class(sync_map)
# Save the synchronized map as an HTML file
htmltools::save_html(sync_map, "synchronized_map.html")
class(sync_map)
st = sync_map %>% prependContent(
tags$head(
tags$style(".leaflet-popup-content-wrapper {background-color: #ff0000;}")
)
)
saveWidget(st, "synchronized_map.html")
st = lf %>% prependContent(
tags$head(
tags$style(".leaflet-popup-content-wrapper {background-color: #ff0000;}")
),
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
")),
sync(map1, map2)
)
st = sync(map1, map2) %>% prependContent(
tags$head(
tags$style(".leaflet-popup-content-wrapper {background-color: #ff0000;}")
),
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
"))
)
saveWidget(sync_map, "synchronized_map.html")
# Use leafsync to link the maps side-by-side with synchronized movement
# Synchronize the maps
sync_map <- browsable(tagList(
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
")),
sync(map1, map2)
))
saveWidget(sync_map, "synchronized_map.html")
?prependContent
?sync
class(map1)
class(sync(map1, map2))
saveWidget(as_widget(sync_map), "synchronized_map.html")
library(shiny)
saveWidget(as_widget(sync_map), "synchronized_map.html")
?as_widget
library(plotly)
saveWidget(as_widget(sync_map), "synchronized_map.html")
as_widget(sync_map)
sync_map
save_tags <- function (tags, file, selfcontained = F, libdir = "./lib")
{
if (is.null(libdir)) {
libdir <- paste(tools::file_path_sans_ext(basename(file)),
"_files", sep = "")
}
htmltools::save_html(tags, file = file, libdir = libdir)
if (selfcontained) {
if (!htmlwidgets:::pandoc_available()) {
stop("Saving a widget with selfcontained = TRUE requires pandoc. For details see:\n",
"https://github.com/rstudio/rmarkdown/blob/master/PANDOC.md")
}
htmlwidgets:::pandoc_self_contained_html(file, file)
unlink(libdir, recursive = TRUE)
}
return(file)
}
save_tags(mapSync, "index.html", selfcontained=TRUE)
save_tags(sync_map, "index.html", selfcontained=TRUE)
export(sync_map, "synchronized_map.html")
?orca
orca(sync_map, "synchronized_map.html")
kaleido(sync_map, "synchronized_map.html")
library(reticulate)
install.packages("reticulate")
library(reticulate)
kaleido(sync_map, "synchronized_map.html")
kaleido(sync_map, "synchronized_map.html")
kaleido(sync_map, "synchronized_map.html")
kaleido(sync_map, "synchronized_map.html")
kaleido(sync_map, "synchronized_map.html")
library(reticulate)
library(reticulate)
sync(map1, map2)
sync_map
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(plane),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 1                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 4,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
# Use leafsync to link the maps side-by-side with synchronized movement
# Synchronize the maps
sync_map <- browsable(tagList(
tags$style(HTML("
html, body {width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;}
.leaflet-container {width: 100% !important; height: 100vh !important; float: left;}
")),
sync(map1, map2)
))
sync_map
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(plane),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
addPolygons(data = cadaster_merged_sf,
weight = 4,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
planes_merged_sf
View(planes_merged_sf)
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 10                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
palette <- colorFactor( domain = unique(planes_merged_sf$cluster))
palette <- colorFactor(palette = "Viridis", domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
library(RColorBrewer)
palette <- colorFactor(palette = brewer.pal(12, "Paired"), domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
library(RColorBrewer)
palette <- colorFactor(palette = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(planes_merged_sf$cluster))),
domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
unique(planes_merged_sf$cluster)
len(unique(planes_merged_sf$cluster))
unique(planes_merged_sf$cluster).length
length(unique(planes_merged_sf$cluster))
palette <- colorFactor(palette = viridis(length(unique(planes_merged_sf$cluster))), domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
palette <- colorFactor(palette = viridis(length(unique(planes_merged_sf$cluster))), domain = unique(planes_merged_sf$cluster))
library(viridis)
palette <- colorFactor(palette = viridis(length(unique(planes_merged_sf$cluster))), domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
library(leaflet)
library(colorspace)
# Create a palette where consecutive clusters have distinct colors
num_clusters <- length(unique(planes_merged_sf$cluster))
# Generate a palette with high contrast, using `hcl.colors` for better differentiation
# Choose the "Set1" palette from `hcl.colors`, which provides highly contrasting colors
palette <- colorFactor(palette = hcl.colors(num_clusters, palette = "Set1", alpha = 1),
domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
palette <- colorFactor(palette = hcl.colors(num_clusters, palette = "Set1", alpha = 1),
domain = unique(planes_merged_sf$cluster))
library(RColorBrewer)
palette <- colorFactor(palette = brewer.pal(12, "Paired"), domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
?brewer.pal
palette <- colorFactor(palette = brewer.pal(12, "Set3"), domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.5,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0.75,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
palette <- colorFactor(palette = brewer.pal(8, "Set1"), domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
palette <- colorFactor(palette = brewer.pal(8, "Set2"), domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
palette <- colorFactor(palette = brewer.pal(12, "Set3"), domain = unique(planes_merged_sf$cluster))
map2 <- leaflet(planes_merged_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addPolygons(
fillColor = ~ palette(cluster),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 4                 # Set outline thickness
) %>%
# addPolygons(data = cadaster_merged_sf,
#             weight = 4,
#             color =  "black",
#             fillColor = "white",
#             fillOpacity = 0,
#             opacity = 1,
#             label = ~paste(REFCAT, construction, CONSTRU, sep=". ")) %>%
addScaleBar()
map2
