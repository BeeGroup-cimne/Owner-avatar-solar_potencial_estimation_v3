currentReading <- currentReading[ , c("ts", "v")]
} else {
currentReading <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(currentReading) <- c("ts", "v")
}
currentReading$ts <- as.POSIXct(currentReading$ts, format="%Y-%m-%dT%H:%M:%S", tz="Europe/London")
measurements[[i]] <- currentReading
discontinuities[[i]] <- info_json[info_json$device_id == currentDevice, ]$discontinuities
}
all_times <- do.call(c, lapply(measurements, function(df) df$ts))
common_time_range <- range(all_times)
nrows <- length(measurements) %/% 3 + (length(measurements) %% 3 > 0)
plots <- mapply(function(df, title, discontinuities_df) plot_dataframe(df, common_time_range, title, 200*nrows, discontinuities_df), measurements, currentCampusDevices_df$device_name, discontinuities, SIMPLIFY=FALSE)
# return(plots)
combined_plot <- subplot(plots, nrows = nrows,
titleX = TRUE, titleY = TRUE,
shareX = FALSE, shareY = FALSE,
margin = 0.05)  %>%
layout(title = currentCampus)
return(combined_plot)
}
makePlot("Campus Diagonal Nord")
makePlot <- function(currentCampus){
currentCampusDevices_df <- subset(allDevices_df, campus == currentCampus)
measurements <- list()
discontinuities <- list()
for(i in 1:nrow(currentCampusDevices_df)) {
currentDevice <- currentCampusDevices_df$device_id[i]
file2023 <- paste(basedir,currentDevice, "_2023.csv",sep="")
file2024 <- paste(basedir,currentDevice, "_2024.csv",sep="")
currentReading2023 <- data.frame()
currentReading2024 <- data.frame()
if(file.exists(file2023)){
currentReading2023 <- data.frame(read.csv(file2023))
}
if(file.exists(file2024)){
currentReading2024 <- data.frame(read.csv(file2024))
}
currentReading <- rbind(currentReading2023, currentReading2024)
if(nrow(currentReading) > 0){
currentReading <- currentReading[ , c("ts", "v")]
} else {
currentReading <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(currentReading) <- c("ts", "v")
}
currentReading$ts <- as.POSIXct(currentReading$ts, format="%Y-%m-%dT%H:%M:%S", tz="Europe/London")
measurements[[i]] <- currentReading
discontinuities[[i]] <- info_json[info_json$device_id == currentDevice, ]$discontinuities
}
all_times <- do.call(c, lapply(measurements, function(df) df$ts))
common_time_range <- range(all_times)
nrows <- length(measurements) %/% 3 + (length(measurements) %% 3 > 0)
plots <- mapply(function(df, title, discontinuities_df) plot_dataframe(df, common_time_range, title, 200*nrows, discontinuities_df), measurements, currentCampusDevices_df$device_name, discontinuities, SIMPLIFY=FALSE)
# return(plots)
combined_plot <- subplot(plots, nrows = nrows,
titleX = TRUE, titleY = TRUE,
shareX = TRUE, shareY = TRUE,
margin = 0.05)  %>%
layout(title = currentCampus)
return(combined_plot)
}
makePlot("Campus Diagonal Nord")
basePath <- (dirname(rstudioapi::getActiveDocumentContext()$path))
basedir <- paste(basePath, "/Readings/EACTIVE_1h/", sep="")
currentCampus <- "Campus Sant Cugat"
plot_dataframe <- function(df, x_range, title="", height = 100, discontinuities_df) {
max_y <- mean(df$v) + 6*sd(df$v)
p <- plot_ly(df, x = ~ts, y = ~v, type = 'scatter',
mode = 'lines', line = list(color = 'blue'),
width = 1750, height = height) %>%
layout(title = NULL,
xaxis = list(title = ' ', range = x_range),
yaxis = list(title = 'kWh', range = list(0, max_y)),
showlegend = FALSE) %>%
add_annotations(text = title, x=0.5, y = 1.05,
yref = "paper", xref = "paper", xanchor = "middle", yanchor = "top",
showarrow = FALSE, fontSize=15)
if(length(discontinuities_df$timestamp) < 1){
return(p)
}
timestamps <- discontinuities_df$timestamp[[1]]
timestamps <- as.POSIXct(timestamps, format="%Y-%m-%d %H:%M:%S", tz="Europe/London")
lengths <- discontinuities_df$length[[1]]
shapes <- list()
for (i in 1:length(timestamps)) {
start_time <- timestamps[i]
end_time <- start_time + as.difftime(lengths[i], units = "hours")
rectangle <- list(
type = "rect",
x0 = start_time,
x1 = end_time,
y0 = 0,
y1 = max_y*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
# if(lengths[i] >= 24){
#   p <- p %>% add_text(showlegend = FALSE, x = end_time+ as.difftime(6, units = "hours"), y = max(df$v)*0.9,
#        text = lengths[i])
# }
}
rectangle <- list(
type = "rect",
x0 = df$ts[length(df$ts)],
x1 = x_range[length(x_range)],
y0 = 0,
y1 = max_y*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
p <- p %>% layout(shapes = shapes)
return(p)
}
makePlot <- function(currentCampus){
currentCampusDevices_df <- subset(allDevices_df, campus == currentCampus)
measurements <- list()
discontinuities <- list()
for(i in 1:nrow(currentCampusDevices_df)) {
currentDevice <- currentCampusDevices_df$device_id[i]
file2023 <- paste(basedir,currentDevice, "_2023.csv",sep="")
file2024 <- paste(basedir,currentDevice, "_2024.csv",sep="")
currentReading2023 <- data.frame()
currentReading2024 <- data.frame()
if(file.exists(file2023)){
currentReading2023 <- data.frame(read.csv(file2023))
}
if(file.exists(file2024)){
currentReading2024 <- data.frame(read.csv(file2024))
}
currentReading <- rbind(currentReading2023, currentReading2024)
if(nrow(currentReading) > 0){
currentReading <- currentReading[ , c("ts", "v")]
} else {
currentReading <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(currentReading) <- c("ts", "v")
}
currentReading$ts <- as.POSIXct(currentReading$ts, format="%Y-%m-%dT%H:%M:%S", tz="Europe/London")
measurements[[i]] <- currentReading
discontinuities[[i]] <- info_json[info_json$device_id == currentDevice, ]$discontinuities
}
all_times <- do.call(c, lapply(measurements, function(df) df$ts))
common_time_range <- range(all_times)
nrows <- length(measurements) %/% 3 + (length(measurements) %% 3 > 0)
plots <- mapply(function(df, title, discontinuities_df) plot_dataframe(df, common_time_range, title, 200*nrows, discontinuities_df), measurements, currentCampusDevices_df$device_name, discontinuities, SIMPLIFY=FALSE)
# return(plots)
combined_plot <- subplot(plots, nrows = nrows,
titleX = TRUE, titleY = TRUE,
shareX = TRUE, shareY = TRUE,
margin = 0.05)  %>%
layout(title = currentCampus)
return(combined_plot)
}
makePlot("Campus Sant Cugat")
makePlot("Campus Diagonal Nord")
allCampus <- unique(allDevices_df$campus)
allCampus <- allCampus[order(names(setNames(allCampus, allCampus)))]
basePath <- (dirname(rstudioapi::getActiveDocumentContext()$path))
basedir <- paste(basePath, "/Readings/EACTIVE_1h/", sep="")
currentCampus <- "Campus Sant Cugat"
plot_dataframe <- function(df, x_range, title="", height = 100, discontinuities_df) {
max_y <- mean(df$v) + 6*sd(df$v)
p <- plot_ly(df, x = ~ts, y = ~v, type = 'scatter',
mode = 'lines', line = list(color = 'blue'),
width = 1750, height = height) %>%
layout(title = NULL,
xaxis = list(title = ' ', range = x_range),
yaxis = list(title = 'kWh'),
showlegend = FALSE) %>%
add_annotations(text = title, x=0.5, y = 1.05,
yref = "paper", xref = "paper", xanchor = "middle", yanchor = "top",
showarrow = FALSE, fontSize=15)
if(length(discontinuities_df$timestamp) < 1){
return(p)
}
timestamps <- discontinuities_df$timestamp[[1]]
timestamps <- as.POSIXct(timestamps, format="%Y-%m-%d %H:%M:%S", tz="Europe/London")
lengths <- discontinuities_df$length[[1]]
shapes <- list()
for (i in 1:length(timestamps)) {
start_time <- timestamps[i]
end_time <- start_time + as.difftime(lengths[i], units = "hours")
rectangle <- list(
type = "rect",
x0 = start_time,
x1 = end_time,
y0 = 0,
y1 = max_y*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
# if(lengths[i] >= 24){
#   p <- p %>% add_text(showlegend = FALSE, x = end_time+ as.difftime(6, units = "hours"), y = max(df$v)*0.9,
#        text = lengths[i])
# }
}
rectangle <- list(
type = "rect",
x0 = df$ts[length(df$ts)],
x1 = x_range[length(x_range)],
y0 = 0,
y1 = max_y*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
p <- p %>% layout(shapes = shapes)
return(p)
}
makePlot("Campus Diagonal Nord")
basePath <- (dirname(rstudioapi::getActiveDocumentContext()$path))
basedir <- paste(basePath, "/Readings/EACTIVE_1h/", sep="")
currentCampus <- "Campus Sant Cugat"
plot_dataframe <- function(df, x_range, title="", height = 100, discontinuities_df) {
p <- plot_ly(df, x = ~ts, y = ~v, type = 'scatter',
mode = 'lines', line = list(color = 'blue'),
width = 1750, height = height) %>%
layout(title = NULL,
xaxis = list(title = ' ', range = x_range),
yaxis = list(title = 'kWh'),
showlegend = FALSE) %>%
add_annotations(text = title, x=0.5, y = 1.05,
yref = "paper", xref = "paper", xanchor = "middle", yanchor = "top",
showarrow = FALSE, fontSize=15, align = "center")
if(length(discontinuities_df$timestamp) < 1){
return(p)
}
timestamps <- discontinuities_df$timestamp[[1]]
timestamps <- as.POSIXct(timestamps, format="%Y-%m-%d %H:%M:%S", tz="Europe/London")
lengths <- discontinuities_df$length[[1]]
shapes <- list()
for (i in 1:length(timestamps)) {
start_time <- timestamps[i]
end_time <- start_time + as.difftime(lengths[i], units = "hours")
rectangle <- list(
type = "rect",
x0 = start_time,
x1 = end_time,
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
# if(lengths[i] >= 24){
#   p <- p %>% add_text(showlegend = FALSE, x = end_time+ as.difftime(6, units = "hours"), y = max(df$v)*0.9,
#        text = lengths[i])
# }
}
rectangle <- list(
type = "rect",
x0 = df$ts[length(df$ts)],
x1 = x_range[length(x_range)],
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
p <- p %>% layout(shapes = shapes)
return(p)
}
makePlot("Campus Sant Cugat")
basePath <- (dirname(rstudioapi::getActiveDocumentContext()$path))
basedir <- paste(basePath, "/Readings/EACTIVE_1h/", sep="")
currentCampus <- "Campus Sant Cugat"
plot_dataframe <- function(df, x_range, title="", height = 100, discontinuities_df) {
p <- plot_ly(df, x = ~ts, y = ~v, type = 'scatter',
mode = 'lines', line = list(color = 'blue'),
width = 1750, height = height) %>%
layout(title = NULL,
xaxis = list(title = ' ', range = x_range),
yaxis = list(title = 'kWh'),
showlegend = FALSE) %>%
add_annotations(text = title, x=0.5, y = 1.05,
yref = "paper", xref = "paper", xanchor = "middle", yanchor = "top",
showarrow = FALSE, fontSize=15, align = "center")
if(length(discontinuities_df$timestamp) < 1){
return(p)
}
timestamps <- discontinuities_df$timestamp[[1]]
timestamps <- as.POSIXct(timestamps, format="%Y-%m-%d %H:%M:%S", tz="Europe/London")
lengths <- discontinuities_df$length[[1]]
shapes <- list()
for (i in 1:length(timestamps)) {
start_time <- timestamps[i]
end_time <- start_time + as.difftime(lengths[i], units = "hours")
rectangle <- list(
type = "rect",
x0 = start_time,
x1 = end_time,
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
# if(lengths[i] >= 24){
#   p <- p %>% add_text(showlegend = FALSE, x = end_time+ as.difftime(6, units = "hours"), y = max(df$v)*0.9,
#        text = lengths[i])
# }
}
rectangle <- list(
type = "rect",
x0 = df$ts[length(df$ts)],
x1 = x_range[length(x_range)],
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
p <- p %>% layout(shapes = shapes)
return(p)
}
makePlot <- function(currentCampus){
currentCampusDevices_df <- subset(allDevices_df, campus == currentCampus)
measurements <- list()
discontinuities <- list()
for(i in 1:nrow(currentCampusDevices_df)) {
currentDevice <- currentCampusDevices_df$device_id[i]
file2023 <- paste(basedir,currentDevice, "_2023.csv",sep="")
file2024 <- paste(basedir,currentDevice, "_2024.csv",sep="")
currentReading2023 <- data.frame()
currentReading2024 <- data.frame()
if(file.exists(file2023)){
currentReading2023 <- data.frame(read.csv(file2023))
}
if(file.exists(file2024)){
currentReading2024 <- data.frame(read.csv(file2024))
}
currentReading <- rbind(currentReading2023, currentReading2024)
if(nrow(currentReading) > 0){
currentReading <- currentReading[ , c("ts", "v")]
} else {
currentReading <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(currentReading) <- c("ts", "v")
}
currentReading$ts <- as.POSIXct(currentReading$ts, format="%Y-%m-%dT%H:%M:%S", tz="Europe/London")
measurements[[i]] <- currentReading
discontinuities[[i]] <- info_json[info_json$device_id == currentDevice, ]$discontinuities
}
all_times <- do.call(c, lapply(measurements, function(df) df$ts))
common_time_range <- range(all_times)
nrows <- length(measurements) %/% 3 + (length(measurements) %% 3 > 0)
plots <- mapply(function(df, title, discontinuities_df) plot_dataframe(df, common_time_range, title, 200*nrows, discontinuities_df), measurements, currentCampusDevices_df$device_name, discontinuities, SIMPLIFY=FALSE)
# return(plots)
combined_plot <- subplot(plots, nrows = nrows,
titleX = TRUE, titleY = TRUE,
shareX = FALSE, shareY = FALSE)  %>%
layout(title = currentCampus)
return(combined_plot)
}
makePlot("Campus Sant Cugat")
library(RODBC)
install.packages("RODBC")
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=10.7.30.10;database=datadis_upc_v2)
''
''
dbhandle <- odbcDriverConnect('driver={SQL Server};server=10.7.30.10;database=datadis_upc_v2')
res <- sqlQuery(dbhandle, 'select * from supplies')
dbhandle <- odbcDriverConnect('Driver=SQL Server;server=10.7.30.10;database=datadis_upc_v2')
dbhandle <- odbcDriverConnect('Driver=SQL Server;Server=10.7.30.10;Database=datadis_upc_v2;UID=UPC; PWD=SEERREES')
res <- sqlQuery(dbhandle, 'select * from supplies')
dbhandle <- odbcDriverConnect('Driver=SQL Server;Server=10.7.30.10;Database=datadis_upc_v2;UID=UPC; PWD=SEERREES')
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters.R", echo=TRUE)
sync_map
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters.R", echo=TRUE)
parcels
pointsDF_list
source("~/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Map Visualizations/ShowClusters.R", echo=TRUE)
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels[1]
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
for (construction in constructions){
clusters <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/"), recursive = FALSE, full.names = FALSE)
for (cluster in clusters){
df <- read.csv(paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/", cluster),
header = FALSE)
colnames(df) <- c("x", "y", "z")
df <- df %>% mutate(construction = construction)
df <- df %>% mutate(cluster = cluster)
pointsDF_list <- rbind(pointsDF_list, df)
}
}
}
}
data_sf <- st_as_sf(pointsDF_list, coords = c("x", "y"), crs = 25831)
data_sf <- st_transform(data_sf, crs = 4326)
unique_clusters <- unique(data_sf$cluster)
palette <- colorFactor(palette = "Set1", domain = unique_clusters)
map2 <-leaflet(data_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(# Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
map2
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels[1]
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
for (construction in constructions){
clusters <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/"), recursive = FALSE, full.names = FALSE)
for (cluster in clusters){
df <- read.csv(paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/", cluster),
header = FALSE)
colnames(df) <- c("x", "y", "z")
df <- df %>% mutate(construction = construction)
df <- df %>% mutate(cluster = cluster)
pointsDF_list <- rbind(pointsDF_list, df)
}
}
}
}
data_sf <- st_as_sf(pointsDF_list, coords = c("x", "y"), crs = 25831)
data_sf <- st_transform(data_sf, crs = 4326)
unique_clusters <- unique(data_sf$cluster)
palette <- colorFactor(palette = "Set1", domain = unique_clusters)
map2 <-leaflet(data_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(# Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
map2
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels[2]
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
for (construction in constructions){
clusters <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/"), recursive = FALSE, full.names = FALSE)
for (cluster in clusters){
df <- read.csv(paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/", cluster),
header = FALSE)
colnames(df) <- c("x", "y", "z")
df <- df %>% mutate(construction = construction)
df <- df %>% mutate(cluster = cluster)
pointsDF_list <- rbind(pointsDF_list, df)
}
}
}
}
data_sf <- st_as_sf(pointsDF_list, coords = c("x", "y"), crs = 25831)
data_sf <- st_transform(data_sf, crs = 4326)
unique_clusters <- unique(data_sf$cluster)
palette <- colorFactor(palette = "Set1", domain = unique_clusters)
map2 <-leaflet(data_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(# Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
map2
# Create the second map
pointsDF_list <- data.frame()
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels[2]
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
for (construction in constructions){
clusters <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/"), recursive = FALSE, full.names = FALSE)
for (cluster in clusters){
df <- read.csv(paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, "/Plane Identification/Plane Points/", cluster),
header = FALSE)
colnames(df) <- c("x", "y", "z")
df <- df %>% mutate(construction = construction)
df <- df %>% mutate(cluster = cluster)
pointsDF_list <- rbind(pointsDF_list, df)
}
}
}
}
data_sf <- st_as_sf(pointsDF_list, coords = c("x", "y"), crs = 25831)
data_sf <- st_transform(data_sf, crs = 4326)
unique_clusters <- unique(data_sf$cluster)
palette <- colorFactor(palette = "Set1", domain = unique_clusters)
map2 <-leaflet(data_sf, options = leafletOptions(maxZoom = 20)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=20)) %>%
addCircleMarkers(# Use x and y columns for coordinates
color = ~palette(cluster),   # Color points by cluster
label = ~cluster,            # Optional: label each point with its cluster tag
radius = 5,                  # Adjust point size if needed
stroke = FALSE, fillOpacity = 0.7
)%>%
addScaleBar()
map2
